### **`ulimit` 命令详解**

`ulimit` 是 Linux/Unix 系统中一个非常重要的 Shell 内置命令，用于查看和设置用户对系统资源的限制。通过它可以控制进程可以使用的系统资源数量，例如文件描述符的最大数量、堆栈大小、最大进程数等。

---

### **基本用法**

#### **查看当前资源限制**
```bash
ulimit -a
```
- 输出当前所有资源的限制。
- 示例输出：
  ```
  core file size          (blocks, -c) 0
  data seg size           (kbytes, -d) unlimited
  file size               (blocks, -f) unlimited
  open files              (-n) 1024
  stack size              (kbytes, -s) 8192
  max user processes      (-u) 4096
  ```

---

### **常用选项**

| 选项 | 描述                                                                                     |
|------|------------------------------------------------------------------------------------------|
| `-a` | 显示所有资源限制。                                                                       |
| `-c` | 核心转储文件的大小（以块为单位）。                                                        |
| `-d` | 数据段的最大大小（以 KB 为单位）。                                                        |
| `-f` | 文件的最大大小（以块为单位）。                                                           |
| `-n` | 进程能打开的最大文件描述符数量。                                                         |
| `-s` | 堆栈的最大大小（以 KB 为单位）。                                                         |
| `-t` | CPU 时间的最大使用时间（以秒为单位）。                                                   |
| `-u` | 每个用户最大可用进程数。                                                                 |
| `-v` | 虚拟内存的最大大小（以 KB 为单位）。                                                     |
| `-x` | 最大锁内存大小（以 KB 为单位）。                                                         |

---

### **动态设置资源限制**

1. **设置文件描述符数量限制**
   - 查看当前文件描述符限制：
     ```bash
     ulimit -n
     ```
   - 设置新的限制值：
     ```bash
     ulimit -n 65535
     ```

2. **设置堆栈大小限制**
   - 查看堆栈大小限制：
     ```bash
     ulimit -s
     ```
   - 修改堆栈大小（如 16384 KB）：
     ```bash
     ulimit -s 16384
     ```

3. **设置核心转储文件大小**
   - 查看核心文件限制：
     ```bash
     ulimit -c
     ```
   - 允许生成核心转储文件：
     ```bash
     ulimit -c unlimited
     ```

---

### **永久修改资源限制**

#### **方法 1：修改用户配置文件**
编辑当前用户的 `~/.bashrc` 或 `~/.bash_profile` 文件，添加以下内容：
```bash
ulimit -n 65535
ulimit -u 8192
```
保存后，运行以下命令使其生效：
```bash
source ~/.bashrc
```

#### **方法 2：修改 `/etc/security/limits.conf`**
修改系统全局限制，编辑 `/etc/security/limits.conf` 文件：
```bash
sudo nano /etc/security/limits.conf
```
添加以下内容：
```
<用户名>   soft    nofile  65535
<用户名>   hard    nofile  65535
<用户名>   soft    nproc   8192
<用户名>   hard    nproc   8192
```
> `<用户名>` 可替换为具体的用户，也可以用 `*` 表示所有用户。

然后确保 PAM 模块加载了这些限制，检查 `/etc/pam.d/common-session` 和 `/etc/pam.d/common-session-noninteractive` 文件中是否包含以下行：
```
session required pam_limits.so
```

#### **方法 3：修改系统配置文件**
对于某些系统限制（如文件描述符的硬限制），需要修改 `/etc/systemd/system.conf` 和 `/etc/systemd/user.conf`：
```bash
DefaultLimitNOFILE=65535
DefaultLimitNPROC=8192
```
然后重启系统或重新加载 systemd 配置：
```bash
sudo systemctl daemon-reexec
```

---

### **查看系统硬限制与软限制**
- **硬限制：** 系统允许的最大限制，只有超级用户可以修改。
- **软限制：** 用户当前的默认限制，用户可以临时调整但不能超过硬限制。

查看硬限制和软限制：
```bash
ulimit -Hn   # 查看文件描述符的硬限制
ulimit -Sn   # 查看文件描述符的软限制
```

---

### **资源限制实际应用场景**

1. **文件描述符限制**
   - 数据库系统（如 Oracle、MySQL）或高并发服务器需要更多的文件描述符，建议设置 `65535` 或更高。

2. **核心转储文件**
   - 调试程序崩溃时，开启核心转储以捕获错误信息：
     ```bash
     ulimit -c unlimited
     ```

3. **限制用户资源**
   - 限制某些用户的资源使用，防止滥用系统资源。

4. **防止进程耗尽资源**
   - 设置最大用户进程数，防止单个用户或进程耗尽系统资源：
     ```bash
     ulimit -u 4096
     ```

