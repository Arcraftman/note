以下是 Redis 常用命令的详细说明，包括数据结构操作和服务管理等，帮助你更全面地掌握 Redis 命令的使用。

---

## **1. Key（键）操作**
| 命令                | 作用                                                     | 示例                     |
|---------------------|----------------------------------------------------------|--------------------------|
| `SET key value`     | 设置一个键的值                                            | `SET name "John"`        |
| `GET key`           | 获取一个键的值                                            | `GET name`               |
| `DEL key`           | 删除一个键                                                | `DEL name`               |
| `EXISTS key`        | 检查键是否存在                                            | `EXISTS name`            |
| `EXPIRE key seconds`| 设置键的过期时间（秒）                                    | `EXPIRE name 10`         |
| `TTL key`           | 获取键的剩余生存时间（秒）                                | `TTL name`               |
| `KEYS pattern`      | 查找匹配模式的所有键                                      | `KEYS user:*`            |
| `RENAME key newkey` | 修改键的名称                                              | `RENAME name fullname`   |
| `TYPE key`          | 查看键的类型                                              | `TYPE name`              |
  ttl  -2：键不存在。
       -1：键存在，但没有设置过期时间（永久有效）。
---

## **2. String（字符串）操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `SET key value`      | 设置字符串值                                              | `SET age 30`             |
| `GET key`            | 获取字符串值                                              | `GET age`                |
| `INCR key`           | 将键的值自增 1                                           | `INCR age`               |
| `DECR key`           | 将键的值自减 1                                           | `DECR age`               |
| `APPEND key value`   | 在字符串末尾追加值                                       | `APPEND name " Smith"`   |
| `STRLEN key`         | 获取字符串长度                                            | `STRLEN name`            |
| `MSET key value [key value...]`| 设置多个键值对                                 | `MSET a 1 b 2 c 3`       |
| `MGET key [key...]`  | 获取多个键的值                                            | `MGET a b c`             |

---

## **3. Hash（哈希）操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `HSET key field value`| 设置哈希字段的值                                         | `HSET user name "John"`  |
| `HGET key field`      | 获取哈希字段的值                                         | `HGET user name`         |
| `HDEL key field`      | 删除哈希字段                                             | `HDEL user name`         |
| `HLEN key`            | 获取哈希字段的数量                                       | `HLEN user`              |
| `HKEYS key`           | 获取哈希所有字段                                         | `HKEYS user`             |
| `HVALS key`           | 获取哈希所有值                                           | `HVALS user`             |
| `HGETALL key`         | 获取哈希所有字段和值                                     | `HGETALL user`           |

---

## **4. List（列表）操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `LPUSH key value`    | 从列表左侧插入元素                                       | `LPUSH tasks "task1"`    |
| `RPUSH key value`    | 从列表右侧插入元素                                       | `RPUSH tasks "task2"`    |
| `LPOP key`           | 从列表左侧弹出元素                                       | `LPOP tasks`             |
| `RPOP key`           | 从列表右侧弹出元素                                       | `RPOP tasks`             |
| `LLEN key`           | 获取列表长度                                              | `LLEN tasks`             |
| `LRANGE key start stop`| 获取指定范围的列表元素                                 | `LRANGE tasks 0 -1`      |
| `LREM key count value`| 从列表中删除指定值的元素（count 表示删除个数）          | `LREM tasks 1 "task1"`   |

---

## **5. Set（集合）操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `SADD key value`     | 向集合中添加元素                                         | `SADD colors "red"`      |
| `SREM key value`     | 从集合中删除元素                                         | `SREM colors "red"`      |
| `SMEMBERS key`       | 获取集合的所有元素                                       | `SMEMBERS colors`        |
| `SISMEMBER key value`| 检查元素是否在集合中                                     | `SISMEMBER colors "red"` |
| `SCARD key`          | 获取集合中元素的数量                                     | `SCARD colors`           |
| `SDIFF key1 key2`    | 返回两个集合的差集                                       | `SDIFF set1 set2`        |
| `SINTER key1 key2`   | 返回两个集合的交集                                       | `SINTER set1 set2`       |
| `SUNION key1 key2`   | 返回两个集合的并集                                       | `SUNION set1 set2`       |

---

## **6. Sorted Set（有序集合）操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `ZADD key score value`| 添加元素到有序集合（指定分数）                          | `ZADD scores 100 "Alice"`|
| `ZREM key value`      | 删除有序集合中的元素                                     | `ZREM scores "Alice"`    |
| `ZRANGE key start stop [WITHSCORES]` | 获取指定范围的元素                       | `ZRANGE scores 0 -1`     |
| `ZREVRANGE key start stop` | 获取指定范围的元素（从高到低）                     | `ZREVRANGE scores 0 -1`  |
| `ZRANK key value`     | 获取元素的排名（从低到高）                               | `ZRANK scores "Alice"`   |
| `ZCOUNT key min max`  | 获取分数范围内的元素数量                                 | `ZCOUNT scores 90 100`   |
| `ZINCRBY key increment value`| 增加元素的分数                                   | `ZINCRBY scores 10 "Alice"`|

---

## **7. 发布/订阅**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `PUBLISH channel message`| 向频道发送消息                                       | `PUBLISH news "Hello"`   |
| `SUBSCRIBE channel`  | 订阅一个频道                                             | `SUBSCRIBE news`         |
| `UNSUBSCRIBE channel`| 取消订阅                                                 | `UNSUBSCRIBE news`       |

---

## **8. 事务操作**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `MULTI`              | 开启事务                                                 | `MULTI`                  |
| `EXEC`               | 执行事务                                                 | `EXEC`                   |
| `DISCARD`            | 放弃事务                                                 | `DISCARD`                |
| `WATCH key`          | 监视键                                                  | `WATCH name`             |
| `UNWATCH`            | 取消监视                                                | `UNWATCH`                |

---

## **9. Redis 服务管理**
| 命令                 | 作用                                                     | 示例                     |
|----------------------|----------------------------------------------------------|--------------------------|
| `PING`               | 检查 Redis 是否运行                                      | `PING`                   |
| `INFO`               | 查看 Redis 服务信息                                      | `INFO`                   |
| `CONFIG GET parameter`| 获取 Redis 配置项                                       | `CONFIG GET maxmemory`   |
| `CONFIG SET parameter value`| 修改 Redis 配置项                                | `CONFIG SET maxmemory 512mb` |
| `SAVE`               | 将数据同步保存到磁盘                                    | `SAVE`                   |
| `BGSAVE`             | 后台异步保存数据到磁盘                                  | `BGSAVE`                 |
| `FLUSHDB`            | 清空当前数据库                                          | `FLUSHDB`                |
| `FLUSHALL`           | 清空所有数据库                                          | `FLUSHALL`               |

---
命令 info replication

role: master

表示当前实例的角色是 主节点（Master）。
connected_slaves: 0

表示当前没有从节点（Slave）与该主节点建立复制连接。
master_failover_state: no-failover

表示主节点的故障转移状态。当前值为 no-failover，表示没有正在进行的故障转移。
master_replid: 28fb4143f442bfa1ff6c2156ea0eae6d714ea437

主节点的 Replication ID，用于标识主节点的复制历史。
这个值会在 Redis 主节点启动或重启时随机生成，从节点通过它识别当前主节点的复制关系。
master_replid2: 0000000000000000000000000000000000000000

这是 Redis 在 5.0 版本引入的 第二复制 ID，用于处理主节点切换时的复制历史。
当前值为全零，表示没有历史主节点的记录。
master_repl_offset: 0

主节点的复制偏移量（Replication Offset）。
表示主节点已经生成的复制数据量（以字节为单位）。当前值为 0，说明主节点尚未生成任何复制数据。
second_repl_offset: -1

表示与 master_replid2 关联的复制偏移量。
值为 -1，说明没有第二复制 ID，通常是因为从节点没有切换过主节点。
repl_backlog_active: 0

复制积压缓冲区（Replication Backlog Buffer） 的激活状态：
0：未激活（没有从节点连接时，复制缓冲区不会被激活）。
1：已激活。
repl_backlog_size: 1048576

复制积压缓冲区的大小（单位：字节）。
当前配置为 1 MB，这是 Redis 默认的复制缓冲区大小。
repl_backlog_first_byte_offset: 0

复制积压缓冲区中 第一个字节的偏移量。
表示缓冲区中保存的复制数据起点偏移量，当前值为 0。
repl_backlog_histlen: 0

复制积压缓冲区的有效数据长度（单位：字节）。
当前值为 0，表示复制缓冲区中没有历史数据（可能因为没有从节点连接或复制未发生）
